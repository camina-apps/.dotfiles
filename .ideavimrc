"" Source your .vimrc
"source ~/.vimrc

set NERDTree
set ReplaceWithRegister     " gr, grr
set argtextobj              " aa, ia
set commentary              " gcc, gc + motion, v_gc
set highlightedyank
set ideajoin
set ideastatusicon=gray
set surround                " ys, cs, ds, S
set textobj-entire          " ae, ie

set visualbell
set noerrorbells


set autoindent
set clipboard+=ideaput
set clipboard+=unnamed
set ignorecase
set incsearch
"set nohlsearch
set number relativenumber
set scrolloff=8
set showcmd
set showmode
set smartindent
set smarttab
set which-key
set notimeout


let g:WhichKey_FontSize = 15
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#41ead4""
let g:WhichKey_SortOrder = "by_key_prefix_first"

" Open ideavimrc
map <leader>; :vsplit ~/.ideavimrc<CR>
let g:WhichKeyDesc_leader_vimrc = "<leader>; open ideavimrc"

"disable key movement in normal, visual, select, and operator-pending modes
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

"move lines up and down and adjust indent
nnoremap <A-k> :m .-2<CR>==
nnoremap <A-j> :m .+1<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

"delete single character without copying into register
nnoremap x "_x

"remap Y to map from current position to the end of line
"This mapping sets up Y to be consistent with the C and D operators, which act from the cursor to the end of the line
nnoremap Y y$
" copy method or json object
nnoremap YY va{Vy}

" increment and decrement number
" nnoremap <leader>+ <C-a>
" nnoremap <leader>- <C-x>

" use ;; for escape
inoremap jj <Esc>


" use space as leader
map <Space> <leader>

" window navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" \n open and focus NERDTree on current open file
map <leader>e :NERDTreeFind<CR>
let g:WhichKeyDesc_leader_explorer = "<leader>e open file in File Explorer"


"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"map <leader>d <Action>(AndroidConnectDebuggerAction)

"map <leader>s <Action>(Switcher)

map ]t <Action>(NextTab)
map [t <Action>(PreviousTab)

" Debug (d)
" TODO add
map <leader>dt <Action>(ToggleLineBreakpoint) 
" step back
" continue
" disconnect
" watch
" expression
" step into
" step out
" quit
" start
" toggle UI
let g:WhichKeyDesc_leader_debug = "<leader>d +Debug"
let g:WhichKeyDesc_debug_breakpoint = "<leader>dt toggle Breakpoint"

" Quit (q) close
map <leader>qt <Action>(CloseEditor)
map <leader>qa <Action>(CloseAllEditors)
map <leader>qo <Action>(CloseAllEditorsButActive)
let g:WhichKeyDesc_leader_quit = "<leader>q +Quit (close)"
let g:WhichKeyDesc_quit_tab = "<leader>qt quit active tab"
let g:WhichKeyDesc_quit_all = "<leader>qa quit all tabs"
let g:WhichKeyDesc_quit_others = "<leader>qo quit other tabs"

" Test (t) 
map gt <Action>(GotoTest)
" run all tests
" debug all tests
map <leader>tr <Action>(RunClass)
map <leader>td <Action>(DebugClass)
map <leader>tf <Action>(RerunFailedTests)
map <leader>ta <Action>(RunTestGroup)
map <leader>tt <Action>(TestTreePopupMenu)
let g:WhichKeyDesc_leader_test = "<leader>t +Test"
let g:WhichKeyDesc_test_run = "<leader>tr run nearest test"
let g:WhichKeyDesc_test_debug = "<leader>td debug nearest test"
let g:WhichKeyDesc_test_goto = "gt go to Test"


" Android (A)
map <leader>Ar <Action>(Run)
map <leader>As <Action>(Stop)
map <leader>Ag <Action>(Android.SyncProject)
map <leader>Ad <Action>(XDebugger.AttachToProcess)
map <leader>Aa <Action>(com.developerphil.adbidea.action.AdbIdeaQuickList)
map <leader>Ae <Action>(Android.DeviceManager2)
" select device
" device explorer
" configuration
" studio bot
let g:WhichKeyDesc_leader_android = "<leader>A +Android"
let g:WhichKeyDesc_android_run = "<leader>Ar run"
let g:WhichKeyDesc_android_stop = "<leader>As stop"
let g:WhichKeyDesc_android_gradleSync = "<leader>Ag gradle sync"
let g:WhichKeyDesc_android_debugger = "<leader>Ad attach debugger"
let g:WhichKeyDesc_android_adb = "<leader>Aa ADB actions"
let g:WhichKeyDesc_android_devices = "<leader>Ae Device Explorer"

" Source code generation (c)
map <leader>cn <Action>(Kotlin.NewFile)
let g:WhichKeyDesc_leader_code = "<leader>c +Code Generation"
let g:WhichKeyDesc_code_newFile = "<leader>cn new file"

" Split (s)
map <leader>sl <Action>(MoveTabRight)
map <leader>sh <Action>(MoveTabLeft)
map <leader>sj <Action>(MoveTabDown)
map <leader>sk <Action>(MoveTabUp)
map <leader>su <Action>(Unsplit)
map <leader>sm <Action>(MoveEditorToOppositeTabGroup)
let g:WhichKeyDesc_leader_split = "<leader>s +Split"
let g:WhichKeyDesc_split_right = "<leader>sl split and move right"
let g:WhichKeyDesc_split_left = "<leader>sh split and move left"
let g:WhichKeyDesc_split_down = "<leader>sj split and move down"
let g:WhichKeyDesc_split_up = "<leader>sk split and move up"
let g:WhichKeyDesc_split_unsplit = "<leader>su unsplit"
let g:WhichKeyDesc_split_move = "<leader>sm move to opposite"

" Find (f)
map <leader>ff <Action>(GotoFile)
map <leader>fs <Action>(FindInPath)
map <leader>fu <Action>(FindUsages)
map <leader>fr <Action>(RecentFiles)
map <leader>fe <Action>(SearchEverywhere)
map <leader>fa <Action>(GotoAction)
map <leader>fl <Action>(RecentLocations)
let g:WhichKeyDesc_leader_finder = "<leader>f +Find"
let g:WhichKeyDesc_finder_file = "<leader>ff Find file (Name)"
let g:WhichKeyDesc_finder_string = "<leader>fs Find string"
let g:WhichKeyDesc_finder_usage = "<leader>fu Find usage"
let g:WhichKeyDesc_finder_recent = "<leader>fr recent files"
let g:WhichKeyDesc_finder_everywhere = "<leader>fe everywhere"
let g:WhichKeyDesc_finder_action = "<leader>fa action"
let g:WhichKeyDesc_finder_location = "<leader>fl recent location"

" Views (v)
map <leader>vb <Action>(ActivateBuildToolWindow)
map <leader>vc <Action>(ActivateCommitToolWindow)
map <leader>vd <Action>(ActivateDebugToolWindow)
map <leader>ve <Action>(ActivateDeviceExplorerToolWindow)
map <leader>vg <Action>(ActivateVersionControlToolWindow)
map <leader>vl <Action>(ActivateLogcatToolWindow)
map <leader>vm <Action>(ActivateBookmarksToolWindow)
map <leader>vo <Action>(ActivateTODOToolWindow)
map <leader>vp <Action>(ActivateProblemsViewToolWindow)
map <leader>vs <Action>(ActivateStructureToolWindow)
map <leader>vt <Action>(ActivateTerminalToolWindow)
"map <leader> <Action>(ActivatePullRequestsToolWindow)
map <leader>vz <Action>(ToggleZenMode)
let g:WhichKeyDesc_leader_view = "<leader>v +View"
let g:WhichKeyDesc_view_build = "<leader>vb BUILD view"
let g:WhichKeyDesc_view_commit = "<leader>vc COMMIT view"
let g:WhichKeyDesc_view_debug = "<leader>vd DEBUG view"
let g:WhichKeyDesc_view_explorer = "<leader>ve device EXPLORER view"
let g:WhichKeyDesc_view_git = "<leader>vg GIT view"
let g:WhichKeyDesc_view_logcat = "<leader>vl LOGCAT view"
let g:WhichKeyDesc_view_marks = "<leader>vm BOOKMARKS (marks) view"
let g:WhichKeyDesc_view_problems = "<leader>vp PROBLEMS view"
let g:WhichKeyDesc_view_structure = "<leader>vs STRUCTURE view"
let g:WhichKeyDesc_view_terminal = "<leader>vt TERMINAL view"
let g:WhichKeyDesc_view_todo = "<leader>vo TODO view"
let g:WhichKeyDesc_view_zen = "<leader>vz toggle Zen mode"

" Lsp (l)
map <leader>la <Action>(ShowIntentionActions)
map <leader>ld <Action>(ActivateProblemsViewToolWindow)
map <leader>lf <Action>(ReformatCode)
map <leader>lk <Action>(ShowErrorDescription)
map <leader>lr <Action>(RenameElement)
map <leader>lu <Action>(FindUsages)
map <leader>lo <Action>(OptimizeImports)
map <leader>lq <Action>(Refactorings.QuickListPopupAction)
map ]d <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)
map gl <Action>(ShowErrorDescription)
let g:WhichKeyDesc_leader_lsp = "<leader>l +LSP"
let g:WhichKeyDesc_lsp_action = "<leader>la code action"
let g:WhichKeyDesc_lsp_diagnostic = "<leader>ld problems file (diagnostics)"
let g:WhichKeyDesc_lsp_format = "<leader>lf format"
let g:WhichKeyDesc_lsp_previewDiagnostic = "<leader>lk prev diagnostic"
let g:WhichKeyDesc_lsp_rename = "<leader>lr rename"
let g:WhichKeyDesc_lsp_usage = "<leader>lu usage"
let g:WhichKeyDesc_lsp_imports = "<leader>lo optimize imports"
let g:WhichKeyDesc_lsp_quicklist = "<leader>lq quicklist refactoring"

" Marks (m)
map <leader>mt <Action>(ToggleBookmark)
map <leader>me <Action>(EditBookmark)
map <leader>ml <Action>(ShowBookmarks)
map gm <Action>(ShowBookmarks)
let g:WhichKeyDesc_leader_marks = "<leader>m +Marks (Bookmarks)"
let g:WhichKeyDesc_marks_toggle = "<leader>mt toggle mark"
let g:WhichKeyDesc_marks_edit = "<leader>me edit name"
let g:WhichKeyDesc_marks_list = "<leader>ml list"
let g:WhichKeyDesc_marks_show = "gm go to marks (show marks)"

" Git (g)
map <leader>gn <Action>(Git.CreateNewBranch)
map <leader>ga <Action>(Git.Branches)
map <leader>gb <Action>(GitToolBox.SwitchRecentBranches)
map <leader>gj <Action>(VcsShowNextChangeMarker)
map <leader>gk <Action>(VcsShowPrevChangeMarker)
map <leader>gd <Action>(Compare.LastVersion)
map <leader>gr <Action>(Vcs.RollbackChangedLines)
map <leader>gc <Action>(ActivateCommitToolWindow)
map <leader>gl <Action>(Annotate)
map <leader>gp <Action>(Vcs.UpdateProject)
map [h <Action>(VcsShowPrevChangeMarker)
map ]h <Action>(VcsShowNextChangeMarker)
let g:WhichKeyDesc_leader_git = "<leader>g +Git"
let g:WhichKeyDesc_git_new = "<leader>gn new branch"
let g:WhichKeyDesc_git_action = "<leader>ga action panel"
let g:WhichKeyDesc_git_branch = "<leader>gb switch branch"
let g:WhichKeyDesc_git_nextHunk = "<leader>gj next hunk "
let g:WhichKeyDesc_git_prevHunk = "<leader>gk prev hunk "
let g:WhichKeyDesc_git_diff = "<leader>gd diff"
let g:WhichKeyDesc_git_rollback = "<leader>gr rollback"
let g:WhichKeyDesc_git_commit = "<leader>gc commit"
let g:WhichKeyDesc_git_blame = "<leader>gl blame"
let g:WhichKeyDesc_git_update = "<leader>gp pull (update project)"

" Find more examples here: https://jb.gg/share-ideavimrc
" find actions in  :actionlist
" track actions by turning on 'IdeaVim: track action Ids' in settings





























