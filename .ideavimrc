"" Source your .vimrc
"source ~/.vimrc

set NERDTree
set ReplaceWithRegister     " gr, grr
set argtextobj              " aa, ia
set commentary              " gcc, gc + motion, v_gc
set highlightedyank
set ideajoin
set ideastatusicon=gray
set surround                " ys, cs, ds, S
set textobj-entire          " ae, ie

set visualbell
set noerrorbells


set autoindent
set clipboard+=ideaput
set clipboard+=unnamed
set ignorecase
set incsearch
"set nohlsearch
set number relativenumber
set scrolloff=8
set showcmd
set showmode
set smartindent
set smarttab
set which-key
set notimeout

let g:WhichKey_FontSize = 15
let g:WhichKey_CommandColor = "#41ead4"
let g:WhichKey_PrefixColor = "#41ead4""
" Open ideavimrc
let g:WhichKeyDesc_leader_vimrc = "<leader>; open ideavimrc"
map <leader>; :vsplit ~/.ideavimrc<CR>
"map / <Action>(Find)

"disable key movement in normal, visual, select, and operator-pending modes
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>

"move lines up and down and adjust indent
nnoremap <A-k> :m .-2<CR>==
nnoremap <A-j> :m .+1<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv

"delete single character without copying into register
nnoremap x "_x

"remap Y to map from current position to the end of line
"This mapping sets up Y to be consistent with the C and D operators, which act from the cursor to the end of the line
nnoremap Y y$
" copy method or json object
nnoremap YY va{Vy}

" increment and decrement number
" nnoremap <leader>+ <C-a>
" nnoremap <leader>- <C-x>

" use ;; for escape
inoremap jj <Esc>

" use space as leader
map <Space> <leader>

" \n open and focus NERDTree on current open file
let g:WhichKeyDesc_leader_explorer = "<leader>e open file in File Explorer"
map <leader>e :NERDTreeFind<CR>


"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
map <leader>d <Action>(AndroidConnectDebuggerAction)
map <leader>b <Action>(ToggleLineBreakpoint)
"map <leader>r <Action>(Refactorings.QuickListPopupAction)

map <leader>s <Action>(Switcher)
map <leader>q <Action>(CloseContent)
map <leader>qa <Action>(CloseAllEditors)

map ]t <Action>(NextTab)
map [t <Action>(PreviousTab)

map ]d <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)
map gl <Action>(ShowErrorDescription)

" Finder (leader f)
let g:WhichKeyDesc_leader_finder = "<leader>f +Find"
let g:WhichKeyDesc_finder_file = "<leader>ff Find file (Name)"
map <leader>ff <Action>(GotoFile)
let g:WhichKeyDesc_finder_string = "<leader>fs Find string"
map <leader>fs <Action>(FindInPath)
let g:WhichKeyDesc_finder_usage = "<leader>fu Find usage"
map <leader>fu <Action>(FindUsages)
let g:WhichKeyDesc_finder_recent = "<leader>fr recent files"
map <leader>fr <Action>(RecentFiles)
let g:WhichKeyDesc_finder_everywhere = "<leader>fe everywhere"
map <leader>fe <Action>(SearchEverywhere)
let g:WhichKeyDesc_finder_action = "<leader>fa action"
map <leader>fa <Action>(GotoAction)

" leader fg - find git status
" leader fk - find keymaps
" leader fh - find help

" Views (leader v)
let g:WhichKeyDesc_leader_view = "<leader>v +view"
let g:WhichKeyDesc_view_todo = "<leader>vo TODO view"
map <leader>vo <Action>(ActivateTODOToolWindow)
let g:WhichKeyDesc_view_logcat = "<leader>vl LOGCAT view"
map <leader>vl <Action>(ActivateLogcatToolWindow)
let g:WhichKeyDesc_view_terminal = "<leader>vt TERMINAL view"
map <leader>vt <Action>(ActivateTerminalToolWindow)
let g:WhichKeyDesc_view_problems = "<leader>vp PROBLEMS view"
map <leader>vp <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_view_git = "<leader>vg GIT view"
map <leader>vg <Action>(ActivateVersionControlToolWindow)
"map <leader>ts <Action>(ActivateFindToolWindow)
let g:WhichKeyDesc_view_build = "<leader>vb BUILD view"
map <leader>vb <Action>(ActivateBuildToolWindow)
"map <leader> <Action>(ActivatePullRequestsToolWindow)
"map <leader>vc <Action>... commit
let g:WhichKeyDesc_view_marks = "<leader>vm BOOKMARKS (marks) view"
map <leader>vm <Action>(ActivateBookmarksToolWindow)
let g:WhichKeyDesc_view_debug = "<leader>vd DEBUG view"
map <leader>vd <Action>(ActivateDebugToolWindow)
let g:WhichKeyDesc_view_structure = "<leader>vs STRUCTURE view"
map <leader>vs <Action>(ActivateStructureToolWindow)

" Lsp (leader l)
let g:WhichKeyDesc_leader_lsp = "<leader>l +lsp"
let g:WhichKeyDesc_lsp_action = "<leader>la code action"
map <leader>la <Action>(ShowIntentionActions)
let g:WhichKeyDesc_lsp_format = "<leader>lf format"
map <leader>lf <Action>(ReformatCode)
let g:WhichKeyDesc_lsp_rename = "<leader>lr rename"
map <leader>lr <Action>(RenameElement)
let g:WhichKeyDesc_lsp_diagnostic = "<leader>ld problems file (diagnostics)"
map <leader>ld <Action>(ActivateProblemsViewToolWindow)
let g:WhichKeyDesc_lsp_usage = "<leader>lu usage"
map <leader>lu <Action>(FindUsages)
let g:WhichKeyDesc_lsp_previewDiagnostic = "<leader> prev diagnostic"
map <leader>lk <Action>(ShowErrorDescription) 

" Bookmarks / Marks
let g:WhichKeyDesc_leader_marks = "<leader>m +Marks (Bookmarks)"
let g:WhichKeyDesc_marks_toggle = "<leader>mt toggle mark"
map <leader>mt <Action>(ToggleBookmark)
let g:WhichKeyDesc_marks_edit = "<leader>me edit name"
map <leader>me <Action>(EditBookmark)
let g:WhichKeyDesc_marks_show = "gm go to marks (show marks)"
map gm <Action>(ShowBookmarks)


" Navigate git changes (hunks)
map [h <Action>(VcsShowPrevChangeMarker)
map ]h <Action>(VcsShowNextChangeMarker)
 
" Find more examples here: https://jb.gg/share-ideavimrc
" find actions in  :actionlist
" track actions by turning on 'IdeaVim: track action Ids' in settings
let g:WhichKey_SortOrder = "by_key_prefix_first"
